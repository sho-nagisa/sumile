@using System.Globalization
@using sumile.Models

@{
    ViewData["Title"] = "シフト一覧";

    var recruitmentPeriods = ViewBag.RecruitmentPeriods as List<RecruitmentPeriod>;
    int? selectedPeriodId = ViewBag.SelectedPeriodId as int?;
    var users = ViewBag.Users as IEnumerable<dynamic> ?? new List<dynamic>();
    var dates = ViewBag.Dates as List<DateTime> ?? new List<DateTime>();
    var submissions = ViewBag.Submissions as IEnumerable<ShiftSubmission> ?? new List<ShiftSubmission>();
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<h2>@ViewData["Title"]</h2>

<div class="mb-3">
    <a asp-action="Submission" controller="Shift" class="btn btn-primary">シフトを提出する</a>

    <form asp-controller="Account" asp-action="Logout" method="post" style="display:inline;">
        @Html.AntiForgeryToken()
        <button type="submit" class="btn btn-danger">ログアウト</button>
    </form>
    <a href="@Url.Action("Index", "Exchange")" class="btn btn-info">シフト交換</a>
</div>

<div style="margin-bottom: 1rem;">
    <label for="periodSelect">表示期間：</label>
    <select id="periodSelect" class="form-select" style="width:auto; display:inline;">
        @if (recruitmentPeriods != null)
        {
            foreach (var rp in recruitmentPeriods)
            {
                <option value="@rp.Id" selected="@(rp.Id == selectedPeriodId)">
                    @rp.StartDate.ToString("yyyy/MM/dd") ～ @rp.EndDate.ToString("yyyy/MM/dd")
                </option>
            }
        }
    </select>
</div>

<script>
    document.getElementById('periodSelect')?.addEventListener('change', function () {
        var pid = this.value;
        window.location.href = '@Url.Action("Index", "Shift")' + '?periodId=' + encodeURIComponent(pid);
    });
</script>

<style>
    .bg-accepted {
        background-color: lightblue;
    }

    .bg-declined {
        background-color: lavender;
    }
</style>

<table class="table table-bordered text-center">
    <thead>
        <tr>
            <th rowspan="3">ユーザー</th>
            <th rowspan="3">鍵持ちOK</th>
            @foreach (var date in dates)
            {
                <th colspan="2">@date.ToString("M/d")</th>
            }
        </tr>
        <tr>
            @foreach (var date in dates)
            {
                <th colspan="2">@date.ToString("ddd", new CultureInfo("ja-JP"))</th>
            }
        </tr>
        <tr>
            @foreach (var date in dates)
            {
                <th>上</th>
                <th>敷</th>
            }
        </tr>
    </thead>
    @{
        users = users.OrderBy(u => u.CustomId).ToList();
    }

    <tbody>
        <tr>
            <th colspan="2">必要枚数</th>
            @foreach (var date in dates)
            {
                var workload = (ViewBag.Workloads as List<DailyWorkload>)
                ?.FirstOrDefault(w => w.Date.Date == date.Date);

                <td colspan="2">
                    @(workload?.RequiredCount.ToString() ?? "-")
                </td>
            }
        </tr>

        <tr>
            <th colspan="2">必要人数</th>
            @foreach (var date in dates)
            {
                var workload = (ViewBag.Workloads as List<DailyWorkload>)
                ?.FirstOrDefault(w => w.Date.Date == date.Date);

                var requiredPeople = workload != null
                ? DailyWorkload.CalculateRequiredPeople(workload.RequiredCount)
                : 0;

                <td colspan="2">@requiredPeople</td>
            }
        </tr>

        @foreach (var user in users)
        {
            <tr>
                <td>@user.CustomId (@user.Name)</td>

                @{
                    var hasKeyHolder = submissions.Any(s => s.UserId == user.Id && s.UserShiftRole == UserShiftRole.KeyHolder);
                }
                <td>@(hasKeyHolder ? "★" : "")</td>

                @foreach (var date in dates)
                {
                    var morning = submissions.FirstOrDefault(s => s.UserId == user.Id && s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning);
                    var night = submissions.FirstOrDefault(s => s.UserId == user.Id && s.Date.Date == date.Date && s.ShiftType == ShiftType.Night);

                    var morningSymbol = ConvertStateToColoredSymbol(morning?.ShiftStatus, morning?.UserShiftRole);
                    var nightSymbol = ConvertStateToColoredSymbol(night?.ShiftStatus, night?.UserShiftRole);

                    <td>@Html.Raw(morningSymbol)</td>
                    <td>@Html.Raw(nightSymbol)</td>
                }
            </tr>
        }
    </tbody>

    <tfoot>
        <tr>
            <th colspan="2">今の〇の数</th>
            @foreach (var date in dates)
            {
                var morningCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning && s.ShiftStatus == ShiftState.Accepted);
                var nightCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Night && s.ShiftStatus == ShiftState.Accepted);

                <td>@morningCount</td>
                <td>@nightCount</td>
            }
        </tr>

        <tr>
            <th colspan="2">鍵持ちの人数</th>
            @foreach (var date in dates)
            {
                var morningCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning && s.ShiftStatus == ShiftState.Accepted && s.UserShiftRole == UserShiftRole.KeyHolder);
                var nightCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Night && s.ShiftStatus == ShiftState.Accepted && s.UserShiftRole == UserShiftRole.KeyHolder);

                <td>@morningCount</td>
                <td>@nightCount</td>
            }
        </tr>

        <tr>
            <th colspan="2">不足人数</th>
            @foreach (var date in dates)
            {
                var workload = (ViewBag.Workloads as List<DailyWorkload>)
                ?.FirstOrDefault(w => w.Date.Date == date.Date);

                var requiredPeople = workload != null
                ? DailyWorkload.CalculateRequiredPeople(workload.RequiredCount)
                : 0;

                var actualMorning = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning && s.ShiftStatus == ShiftState.Accepted);
                var actualNight = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Night && s.ShiftStatus == ShiftState.Accepted);

                var shortageMorning = Math.Max(requiredPeople - actualMorning, 0);
                var shortageNight = Math.Max(requiredPeople - actualNight, 0);

                <td>@Html.Raw(shortageMorning > 0 ? $"<span class='text-danger'>{shortageMorning}</span>" : "0")</td>
                <td>@Html.Raw(shortageNight > 0 ? $"<span class='text-danger'>{shortageNight}</span>" : "0")</td>
            }
        </tr>
    </tfoot>
</table>

@functions {
    string ConvertStateToColoredSymbol(ShiftState? state, UserShiftRole? role)
    {
        string symbol = state switch
        {
            ShiftState.Accepted => "○",
            ShiftState.WantToGiveAway => "△",
            ShiftState.NotAccepted => "",
            _ => "×"
        };

        if (symbol != "○") return symbol;

        return role switch
        {
            UserShiftRole.KeyHolder => "<span style='color:red;'>○</span>",
            UserShiftRole.Normal => "<span style='color:black;'>○</span>",
            UserShiftRole.New => "<span style='color:gray;'>○</span>",
            _ => symbol
        };
    }
}
