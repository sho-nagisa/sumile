@using System.Globalization
@using sumile.Models

@{
    ViewData["Title"] = "シフト一覧(管理者用)";

    var recruitmentPeriods = ViewBag.RecruitmentPeriods as List<RecruitmentPeriod>;
    int? selectedPeriodId = ViewBag.SelectedPeriodId as int?;
    var users = (ViewBag.Users as IEnumerable<dynamic> ?? new List<dynamic>()).OrderBy(u => u.CustomId);
    var dates = ViewBag.Dates as List<DateTime> ?? new List<DateTime>();
    var submissions = ViewBag.Submissions as IEnumerable<ShiftSubmission> ?? new List<ShiftSubmission>();
    var diffKeys = ViewBag.DiffKeys as HashSet<string> ?? new HashSet<string>();
}

<h2>@ViewData["Title"]</h2>

<div class="mb-3">
    <a href="@Url.Action("SetRecruitmentPeriod", "Admin")" class="btn btn-primary">募集期間設定</a>
    <a href="@Url.Action("EditShifts", "Admin")" class="btn btn-secondary">シフト編集</a>
    <a href="@Url.Action("ShiftEditLogs", "Admin")" class="btn btn-info">編集履歴</a>
    <form asp-action="AutoAssignShifts" asp-controller="Admin" method="post" style="display:inline;">
        <input type="hidden" name="periodId" value="@ViewBag.SelectedPeriodId" />
        <button type="submit" class="btn btn-warning" onclick="return confirm('この期間のシフトを自動割り当てしますか？');">
            シフト自動割り当て
        </button>
    <a href="@Url.Action("EditDailyWorkload", "Admin")" class="btn btn-success">枚数編集</a>
    </form>
</div>


<div class="mb-3">
    <label for="periodSelect">表示期間：</label>
    <select id="periodSelect" class="form-select" style="width:auto; display:inline;">
        @foreach (var rp in recruitmentPeriods)
        {
            <option value="@rp.Id" selected="@(rp.Id == selectedPeriodId)">
                @rp.StartDate.ToString("yyyy/MM/dd") ～ @rp.EndDate.ToString("yyyy/MM/dd")
            </option>
        }
    </select>

    @if (selectedPeriodId != null)
    {
        var selectedPeriod = recruitmentPeriods.FirstOrDefault(p => p.Id == selectedPeriodId);
        if (selectedPeriod != null)
        {
            <form asp-action="ToggleSubmissionStatus" asp-controller="Admin" method="post" style="display:inline;">
                <input type="hidden" name="id" value="@selectedPeriod.Id" />
                <button type="submit" class="btn btn-outline-warning ms-2">
                    @(selectedPeriod.IsOpen ? "締切にする" : "募集中に戻す")
                </button>
            </form>
        }
    }
</div>

<script>
    document.getElementById('periodSelect')?.addEventListener('change', function () {
        var pid = this.value;
        window.location.href = '@Url.Action("Index", "Admin")?periodId=' + pid;
    });
</script>

<style>
    .highlight-cell {
        background-color: #fff2ab !important;
    }
</style>

<table class="table table-bordered text-center">
    <thead>
        <tr>
            <th rowspan="3">ユーザー</th>
            <th rowspan="3">鍵持ちOK</th>
            @foreach (var date in dates)
            {
                <th colspan="2">@date.ToString("M/d")</th>
            }
        </tr>
        <tr>
            @foreach (var date in dates)
            {
                <th colspan="2">@date.ToString("ddd", new CultureInfo("ja-JP"))</th>
            }
        </tr>
        <tr>
            @foreach (var date in dates)
            {
                <th>上</th>
                <th>敷</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.CustomId (@user.Name)</td>

                @{
                    var hasKeyHolder = submissions.Any(s => s.UserId == user.Id && s.UserShiftRole == UserShiftRole.KeyHolder);
                }
                <td>@(hasKeyHolder ? "★" : "")</td>

                @foreach (var date in dates)
                {
                    var morning = submissions.FirstOrDefault(s => s.UserId == user.Id && s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning);
                    var night = submissions.FirstOrDefault(s => s.UserId == user.Id && s.Date.Date == date.Date && s.ShiftType == ShiftType.Night);

                    var keyMorning = $"{user.Id}_{date:yyyy-MM-dd}_0";
                    var keyNight = $"{user.Id}_{date:yyyy-MM-dd}_1";

                    string morningClass = diffKeys.Contains(keyMorning) ? "highlight-cell" : "";
                    string nightClass = diffKeys.Contains(keyNight) ? "highlight-cell" : "";

                    string morningSymbol = ConvertStateToColoredSymbol(morning?.ShiftStatus, morning?.UserShiftRole);
                    string nightSymbol = ConvertStateToColoredSymbol(night?.ShiftStatus, night?.UserShiftRole);

                    <td class="@morningClass">@Html.Raw(morningSymbol)</td>
                    <td class="@nightClass">@Html.Raw(nightSymbol)</td>
                }
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <th colspan="2">全体の〇数</th>
            @foreach (var date in dates)
            {
                var morningCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Morning && s.ShiftStatus == ShiftState.Accepted);
                var nightCount = submissions.Count(s => s.Date.Date == date.Date && s.ShiftType == ShiftType.Night && s.ShiftStatus == ShiftState.Accepted);

                <td>@morningCount</td>
                <td>@nightCount</td>
            }
        </tr>
        <tr>
            <th colspan="2">赤丸（鍵持ち）</th>
            @foreach (var date in dates)
            {
                var morningCount = submissions.Count(s =>
                s.Date.Date == date.Date &&
                s.ShiftType == ShiftType.Morning &&
                s.ShiftStatus == ShiftState.Accepted &&
                s.UserShiftRole == UserShiftRole.KeyHolder);

                var nightCount = submissions.Count(s =>
                s.Date.Date == date.Date &&
                s.ShiftType == ShiftType.Night &&
                s.ShiftStatus == ShiftState.Accepted &&
                s.UserShiftRole == UserShiftRole.KeyHolder);

                <td>@morningCount</td>
                <td>@nightCount</td>
            }
        </tr>
    </tfoot>
</table>

@functions {
    string ConvertStateToColoredSymbol(ShiftState? state, UserShiftRole? role)
    {
        string baseSymbol = state switch
        {
            ShiftState.Accepted => "〇",
            ShiftState.WantToGiveAway => "△",
            ShiftState.NotAccepted => "",
            _ => "×"
        };

        if (baseSymbol != "〇") return baseSymbol;

        return role switch
        {
            UserShiftRole.KeyHolder => "<span style='color:red;'>〇</span>",
            UserShiftRole.Normal => "<span style='color:black;'>〇</span>",
            UserShiftRole.New => "<span style='color:gray;'>〇</span>",
            _ => baseSymbol
        };
    }
}
