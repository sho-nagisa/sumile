@{
    ViewData["Title"] = "シフト編集";
    var users = ViewBag.Users as IEnumerable<dynamic> ?? new List<dynamic>();
    var shiftDays = ViewBag.Dates as List<ShiftDay> ?? new List<ShiftDay>();
    var submissions = ViewBag.Submissions as IEnumerable<sumile.Models.ShiftSubmission> ?? new List<sumile.Models.ShiftSubmission>();
    var originalLogs = ViewBag.OriginalLogs as List<sumile.Models.ShiftEditLog> ?? new List<sumile.Models.ShiftEditLog>();
    int? selectedPeriodId = ViewBag.SelectedPeriodId as int?;
}

<h2>@ViewData["Title"]</h2>

<form method="get" asp-action="EditShifts">
    <select name="periodId" onchange="this.form.submit()" class="form-select" style="width:auto; display:inline;">
        @foreach (var rec in ViewBag.RecruitmentPeriods as IEnumerable<sumile.Models.RecruitmentPeriod>)
        {
            <option value="@rec.Id" selected="@(rec.Id == selectedPeriodId)">
                @rec.StartDate.ToString("yyyy-MM-dd") - @rec.EndDate.ToString("yyyy-MM-dd")
            </option>
        }
    </select>
    <input type="submit" value="切り替え" class="btn btn-secondary" />
</form>

<hr />

<form method="post" id="updateForm">
    @Html.AntiForgeryToken()
    <input type="hidden" id="selectedPeriodId" value="@selectedPeriodId" />

    <table class="table table-bordered text-center">
        <thead>
            <tr>
                <th rowspan="3">ユーザー</th>
                @foreach (var day in shiftDays)
                {
                    <th colspan="2">@day.Date.ToString("M月d日")</th>
                }
            </tr>
            <tr>
                @foreach (var day in shiftDays)
                {
                    <th colspan="2">(@day.Date.ToString("ddd"))</th>
                }
            </tr>
            <tr>
                @foreach (var _ in shiftDays)
                {
                    <th>朝</th>
                    <th>夜</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.CustomId (@user.Name)</td>
                    @foreach (var day in shiftDays)
                    {
                        var morning = submissions.FirstOrDefault(s => s.UserId == user.Id && s.ShiftDayId == day.Id && s.ShiftType == ShiftType.Morning);
                        var night = submissions.FirstOrDefault(s => s.UserId == user.Id && s.ShiftDayId == day.Id && s.ShiftType == ShiftType.Night);

                        var morningOriginal = originalLogs.FirstOrDefault(l => l.TargetUserId == user.Id && l.ShiftDayId == day.Id && l.ShiftType == ShiftType.Morning);
                        var nightOriginal = originalLogs.FirstOrDefault(l => l.TargetUserId == user.Id && l.ShiftDayId == day.Id && l.ShiftType == ShiftType.Night);

                        string morningSymbol = ConvertStateToSymbol(morning?.ShiftStatus);
                        string nightSymbol = ConvertStateToSymbol(night?.ShiftStatus);

                        string morningOrigSymbol = ConvertStateToSymbol(morningOriginal?.OldState);
                        string nightOrigSymbol = ConvertStateToSymbol(nightOriginal?.OldState);

                        string morningClass = morningOrigSymbol != morningSymbol ? "bg-warning" : "";
                        string nightClass = nightOrigSymbol != nightSymbol ? "bg-warning" : "";

                        <td class="editable-cell @morningClass"
                            data-user="@user.Id"
                            data-date="@day.Date.ToString("yyyy-MM-dd")"
                            data-shift="Morning"
                            data-original="@morningOrigSymbol">
                            @morningSymbol
                        </td>

                        <td class="editable-cell @nightClass"
                            data-user="@user.Id"
                            data-date="@day.Date.ToString("yyyy-MM-dd")"
                            data-shift="Night"
                            data-original="@nightOrigSymbol">
                            @nightSymbol
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <button type="button" id="saveChanges" class="btn btn-primary">変更を保存</button>
    <a asp-action="Index" class="btn btn-secondary">戻る</a>
</form>

@section Scripts {
    <style>
        .bg-warning {
            background-color: #fff3cd !important;
        }

        .editable-cell:hover {
            cursor: pointer;
            opacity: 0.8;
        }
    </style>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const cells = document.querySelectorAll(".editable-cell");
            let updates = [];
            const symbols = ["×", "〇", "△", ""];

            cells.forEach(cell => {
                cell.addEventListener("click", function () {
                    let currentSymbol = this.textContent.trim();
                    let idx = symbols.indexOf(currentSymbol);
                    if (idx < 0) idx = 0;
                    let nextSymbol = symbols[(idx + 1) % symbols.length];
                    this.textContent = nextSymbol;

                    let shiftData = {
                        userId: this.dataset.user,
                        date: this.dataset.date,
                        shiftType: this.dataset.shift === "Morning" ? 0 : 1,
                        shiftStatus: nextSymbol
                    };

                    let existingIndex = updates.findIndex(u =>
                        u.userId === shiftData.userId &&
                        u.date === shiftData.date &&
                        u.shiftType === shiftData.shiftType
                    );

                    if (existingIndex >= 0) {
                        updates[existingIndex] = shiftData;
                    } else {
                        updates.push(shiftData);
                    }

                    let original = this.dataset.original;
                    if (original !== nextSymbol) {
                        this.classList.add("bg-warning");
                    } else {
                        this.classList.remove("bg-warning");
                    }
                });
            });

            document.getElementById("saveChanges").addEventListener("click", function () {
                const periodId = document.getElementById("selectedPeriodId").value;

                fetch('/Admin/UpdateShifts?periodId=' + periodId, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify(updates)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("シフトを更新しました");
                            location.reload();
                        } else {
                            alert("更新に失敗しました: " + data.error);
                        }
                    })
                    .catch(err => {
                        console.error("通信エラー:", err);
                        alert("通信エラーが発生しました");
                    });
            });
        });
    </script>
}

@functions {
    string ConvertStateToSymbol(sumile.Models.ShiftState? state)
    {
        return state switch
        {
            sumile.Models.ShiftState.Accepted => "〇",
            sumile.Models.ShiftState.WantToGiveAway => "△",
            sumile.Models.ShiftState.NotAccepted => "",
            _ => "×"
        };
    }
}
