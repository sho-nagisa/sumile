@model IEnumerable<sumile.Models.ShiftExchange>
@using sumile.Models

@{
    ViewData["Title"] = "シフト交換掲示板";
}

<h2 class="mb-4">シフト交換掲示板</h2>

@if (TempData["Message"] != null)
{
    <div class="alert alert-success">
        @TempData["Message"]
    </div>
}

<p>
    <a asp-action="Create" class="btn btn-primary mb-3">新しい交換希望を出す</a>
</p>

<table class="table table-bordered text-center">
    <thead class="table-light">
        <tr>
            <th>交換提出者</th>
            <th>交換したいシフト</th>
            <th>交換希望シフト</th>
            <th>ステータス</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            var offered = item.OfferedShiftSubmission;
            var accepted = item.AcceptedShiftSubmission;
            var shiftDateStr = offered?.Date.ToString("yyyy-MM-dd") ?? "";
            var shiftTypeInt = (int)(offered?.ShiftType ?? ShiftType.Morning);
            var periodId = offered?.RecruitmentPeriodId ?? 0;
            var targetUserRole = item.RequestedByUser?.UserShiftRole.ToString() ?? "Normal";

            <tr>
                <td>@item.RequestedByUser?.Name ?? "―"</td>

                <td>
                    @if (offered != null)
                    {
                        <span>
                            @($"{offered.Date:yyyy/MM/dd}（{ConvertShiftType(offered.ShiftType)}）[{ConvertRoleToLabel(offered.UserShiftRole)}]")
                        </span>
                    }
                    else
                    {
                        <span>―</span>
                    }
                </td>

                <td>
                    @if (accepted != null)
                    {
                        <span>
                            @($"{accepted.Date:yyyy/MM/dd}（{ConvertShiftType(accepted.ShiftType)}）[{ConvertRoleToLabel(accepted.UserShiftRole)}]")
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">&lt;交換未選択&gt;</span>
                    }
                </td>

                <td>
                    @if (item.Status == "Accepted")
                    {
                        <span class="badge bg-success">成立済</span>
                    }
                    else
                    {
                        <span class="badge bg-warning text-dark">募集中</span>
                    }
                </td>

                <td>
                    @if (item.Status == "Open" && offered != null)
                    {
                        <form asp-action="Select" asp-route-id="@item.Id" method="post" class="d-inline"
                              onsubmit="return checkExchangeCapacity(this, '@shiftDateStr', '@shiftTypeInt', @periodId, '@ViewBag.CurrentUserRole', '@targetUserRole');">
                            <button type="submit" class="btn btn-sm btn-outline-primary">この交換に応募</button>
                        </form>
                    }
                    else if (item.Status == "Accepted" && accepted != null)
                    {
                        <form asp-action="FinalizeExchange" method="post" class="d-inline">
                            <input type="hidden" name="exchangeId" value="@item.Id" />
                            <button type="submit" class="btn btn-sm btn-success">反映</button>
                        </form>
                    }
                    else
                    {
                        <span>-</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@functions {
    string ConvertRoleToLabel(UserShiftRole? role)
    {
        return role switch
        {
            UserShiftRole.New => "N",
            UserShiftRole.Normal => "NK",
            UserShiftRole.KeyHolder => "鍵",
            _ => "―"
        };
    }

    string ConvertShiftType(ShiftType type)
    {
        return type switch
        {
            ShiftType.Morning => "朝",
            ShiftType.Night => "夜",
            _ => "？"
        };
    }
}

<script>
    async function checkExchangeCapacity(form, date, shiftType, periodId, currentUserRole, targetUserRole) {
        // 鍵持ち同士 or 非鍵同士は即OK
        if (currentUserRole === targetUserRole) return true;

        try {
            const res = await fetch(`/Exchange/GetShiftStatusInfo?date=${date}&shiftType=${shiftType}&periodId=${periodId}`);
            const data = await res.json();

            const redLimit = Math.floor(data.total / 2); // 赤丸の理想的な上限（例：6人中3）
            const redCount = data.redCount;

            // 上限に達している → 黒丸になる警告
            if (targetUserRole === "KeyHolder" && redCount >= redLimit) {
                return confirm("赤丸の上限に達しています。この交換をすると鍵持ちでも黒丸になります。続行しますか？");
            }

            // 上限未満で譲ると、赤丸が補充されない危険 → 警告（但し続行可能）
            if (targetUserRole === "KeyHolder" && redCount < redLimit) {
                return confirm(`現在この時間帯の赤丸は ${redCount} 人です（上限 ${redLimit}）。\n赤丸が不足すると運営に支障が出る可能性があります。\nそれでも交換を続けますか？`);
            }

        } catch (error) {
            alert("人数情報の取得に失敗しました。通信エラーの可能性があります。");
            return false;
        }

        return true;
    }
</script>
